name: Compare Metadata Between Two Salesforce Orgs

on:
  workflow_dispatch:

jobs:
  compare-metadata:
    runs-on: ubuntu-latest
    env:
      ORG1_ALIAS: Org1
      ORG2_ALIAS: Org2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Salesforce CLI and Plugins
        run: |
          npm install -g @salesforce/cli
          sf plugins install sfdx-git-delta --force
      - name: Install SFDX Hardis plugin
              run: echo y | sf plugins install sfdx-hardis@5.24.0

      - name: Create Salesforce DX Project and Prepare Directories
        run: |
          if [ ! -f sfdx-project.json ]; then
            sf project generate --name MetadataCompare --default-package-dir force-app
          fi
          mkdir -p force-app
          echo '{
            "packageDirectories": [
              {"path": "force-app", "default": true}
            ],
            "sourceApiVersion": "58.0"
          }' > sfdx-project.json

      - name: Create Package Manifest
        run: |
          cat <<'EOF' > package.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <Package xmlns="http://soap.sforce.com/2006/04/metadata">
            <types>
              <members>*</members>
              <name>ApexClass</name>
            </types>
            <types>
              <members>*</members>
              <name>ApexTrigger</name>
            </types>
            <types>
              <members>*</members>
              <name>CustomObject</name>
            </types>
            <types>
              <members>*</members>
              <name>LightningComponentBundle</name>
            </types>
            <types>
              <members>*</members>
              <name>StaticResource</name>
            </types>
            <version>58.0</version>
          </Package>
          EOF

      - name: Authenticate to Org1
        run: |
          echo "${{ secrets.SFDX_AUTH_ORG1_URL }}" > auth-org1.txt
          sf org login sfdx-url --sfdx-url-file auth-org1.txt --alias $ORG1_ALIAS --set-default

      - name: Retrieve Org1 Metadata via Hardis Plugin
        run: |
          mkdir -p org1-retrieve
          sf hardis:org:retrieve:sources:dx -o $ORG1_ALIAS -p package.xml -f org1-retrieve

      - name: Authenticate to Org2
        run: |
          echo "${{ secrets.SFDX_AUTH_ORG2_URL }}" > auth-org2.txt
          sf org login sfdx-url --sfdx-url-file auth-org2.txt --alias $ORG2_ALIAS

      - name: Retrieve Org2 Metadata via Hardis Plugin
        run: |
          mkdir -p org2-retrieve
          sf hardis:org:retrieve:sources:dx -o $ORG2_ALIAS -p package.xml -f org2-retrieve

      - name: Generate Delta Package
        run: |
          mkdir -p delta
          sf sgd source delta --source org1-retrieve --target org2-retrieve --output delta
          echo "Generated delta package:"
          ls -la delta/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metadata-delta-package
          path: delta/

      - name: Clean Up
        if: always()
        run: rm -f auth-org*.txt
