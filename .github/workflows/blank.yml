name: Compare Metadata Between Two Salesforce Orgs

on:
  workflow_dispatch:

jobs:
  compare-metadata:
    runs-on: ubuntu-latest
    env:
      ORG1_ALIAS: Org1
      ORG2_ALIAS: Org2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Ensure we persist the credentials so we can push changes
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Salesforce CLI and Plugins
        run: |
          npm install -g @salesforce/cli
          echo y | sf plugins install sfdx-git-delta
          echo y | sf plugins install sfdx-hardis@5.24.0

      - name: Create Salesforce DX Project and Prepare Directories
        run: |
          if [ ! -f sfdx-project.json ]; then
            sf project generate --name MetadataCompare --default-package-dir force-app
          fi
          mkdir -p force-app
          echo '{
            "packageDirectories": [
              {"path": "force-app", "default": true}
            ],
            "sourceApiVersion": "58.0"
          }' > sfdx-project.json

      - name: Authenticate to Org1
        run: |
          echo "${{ secrets.SFDX_AUTH_ORG1_URL }}" > auth-org1.txt
          sf org login sfdx-url --sfdx-url-file auth-org1.txt --alias $ORG1_ALIAS --set-default

      - name: Verify Org1 Authentication
        run: |
          sf org list
          sf org display --target-org $ORG1_ALIAS

      - name: Update org1 package file with complete metadata
        run: |
          sfdx force source manifest create --from-org $ORG1_ALIAS --manifestname=allmetadataorg1 --output-dir manifest

      - name: Retrieve org1 metadata
        run: |
          mkdir -p org1-retrieve
          # Generate config file for main branch
          mkdir -p config/branches
          sf project retrieve start --manifest manifest/allmetadataorg1.xml --output-dir org1-retrieve

      - name: Authenticate to Org2
        run: |
          echo "${{ secrets.SFDX_AUTH_ORG2_URL }}" > auth-org2.txt
          sf org login sfdx-url --sfdx-url-file auth-org2.txt --alias $ORG2_ALIAS

      - name: Verify Org2 Authentication
        run: |
          sf org list
          sf org display --target-org $ORG2_ALIAS

      - name: Update org2 package file with complete metadata
        run: |
          sfdx force source manifest create --from-org $ORG2_ALIAS --manifestname=allmetadataorg2 --output-dir manifest

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: manifest-packages
          path: manifest/

      - name: Clean Up
        if: always()
        run: rm -f auth-org*.txt
